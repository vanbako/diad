- About
I'm creating a henad (12 bit) 5-stage RISC microarchitecture core
The main goal is to keep the pipeline as simple as possible and to avoid stalls where possible
Toolchain is Vivado Lab Edition 2024.2, language verilog

- Details
FPGA: Artix-7, Board: Basys 3
instructions, all memories, (GP) general purpose registers, (SSP) shadow stack pointer, (LR) link register, (PC) program counter are henad (12 bit) in size
floating points are not needed yet. They are for future extension
no branch prediction, no out-of-order execution, no speculative execution, no interrupts, no exceptions, no cache, no TLB, no MMU
no instruction set architecture yet, only microarchitecture
Use handshake signals (like ready/valid) between stages to allow stages to indicate when they can accept new data.
No multi-cycle instructions like mul, div and mod yet
Each stage has its own local hazard or control logic that communicates with adjacent stages.
Use the built-in synchronous Block RAM (BRAM) for both instruction and data memories, single-ported. Make sure to use a one-clock delay (fetch, mem & wb stages)
Memory initialisation is with a bootloader at runtime
No memory controller yet
Single clock domain
Asynchronous Resets using the Artix-7 flip-flops to bring it in the clock domain

- Instruction format
12 bit (henad) total, only those needed for the instruction are coded
[11-8] OPC opcode
[7-4]  BCC branch condition code (0 = RA, 1 = EQ, 2 = NE, 3 = LT, 4 = GT, 5 = LE, 6 = GE)
[7-4]  TGT target general purpose register (16x GP)
[7-4]  TGT target special register (0 = PC, 1 = LR, 2 = IR, 3 = SSP)
[3-0]  SRC source general purpose register (16x GP)
[3-0]  SRC source special register (0 = PC, 1 = LR, 2 = IR, 3 = SSP)
[7]    higher or lower bits immediate value (0 = low, 1 = high)
[5-0]  IMM immediate value (6 bit)
[5-0]  OFF signed 4-bit offset
[2-0]  Instruction set
unused for the instruction:
[x-y]    RSV reserved, must be all 0 (for the moment not checked, a check must be implemented when implementing interrupts where it should generate an illegal instruction interrupt if RSV bits are not 0)

Both general purpose and special registers use the same bits in the instruction format
Regular instructions use general purpose registers, special instructions (SRMOV, SRBCC) use special registers. This will be handled in the decode stage.

Branch condition codes use some of the same bits as TGT, as TGT is not used in branching. This will be handled in the decode stage.

i after the instruction means immediate value
s after the instruction means signed operation

In the assembly language, first operand is source, second operand is target.

NOP (no operation)
HLT (halt)
Li [high|low]#imm (load immediate)
Lis #imm (load immediate sign-extend, only low)
MOV Rs, Rt (move)
MOVi Rt (move immediate)
MOVis Rt (move immediate sign-extend)
ADD Rs, Rt (add)
ADDi Rt (add immediate)
ADDs Rs, Rt	(add signed)
ADDis Rt (add signed immediate)
SUB Rs, Rt (subtract)
SUBi Rt (subtract immediate)
SUBs Rs, Rt	(subtract signed)
SUBis Rt (subtract signed immediate)
NOT Rt (bitwise not)
AND Rs, Rt (bitwise and)
ANDi Rt (bitwise and immediate)
OR Rs, Rt (bitwise or)
ORi Rt (bitwise or immediate)
XOR Rs, Rt (bitwise xor)
XORi Rt (bitwise xor immediate)
SL Rs, Rt (shift left)
SLi Rt (shift left immediate)
SR Rs, Rt (shift right)
SRi Rt (shift right immediate)
SRs Rs, Rt (shift right signed)
SRis Rt (shift right signed immediate)
CMP Rs, Rt (compare)
CMPi Rt (compare immediate)
CMPs Rs, Rt (compare signed)
CMPis Rt (compare signed immediate)
BCC Rs (branch condition code) (branch if condition is met)
BCCi (branch condition code immediate) (branch if condition is met)
BCCis (branch condition code immediate signed) (branch if condition is met)
LD (Rs), Rt (load from data memory)
LDi Rt (load from data memory, immediate address)
ST Rs, (Rt) (store to data memory)
STi (Rt) (store immediate to data memory)
SRMOV PC, LR (store pc in link register)
SRBCC LR+offset (branch condition code to link register with offset) (branch if condition is met)

That's too many instructions for 4 bits opcode, so there will be a need for a special instruction which switches between instruction sets

- Pipeline Stages
1. IA/IF: Instruction Address & Fetch
2. ID:    Instruction Decode
3. EX:    Execute
4. MA/MO: Memory Address & Operation
5. RA/RO: Register Address & Operation

- General purpose registers
0-15 Rx : general purpose

- special registers
PC  : program counter
LR  : link register
IR  : immediate register
SSP : shadow stack pointer (not used yet)

FL: flag register
	zero
	carry
	negative
	overflow

- signals
	reset

- memories
flash (Basys 3 Artix-7 FPGA trainer board)
instruction:
	4096 henads (12 bits) in size
	read-only during pipeline operation (BRAM in Artix-7)
data:
	4096 henads (12 bits) in size
	read-write (BRAM in Artix-7)

- modules
testbench
henad
	reggp
	regflag
	reglr
	meminstr
	memdata
	hazardunit
    stage1ia
    stage1if
    stage2id
    stage3ex
    stage4ma
    stage4mo
    stage5ra
    stage5ro

Hazards
- Read After Write Hazards
- Control Hazards
- No forwarding, only stalling